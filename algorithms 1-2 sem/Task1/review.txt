1. Полином.
1. Не понятно, какого ввода ожидает от меня программа. Не понятно, в каком порядке вводить коэффициенты. -2
2. Вынесение тривиальных однострочных действий в отдельные функции не улучшают читабельность. Тут ты перестаралась. -1
3. Вывод ответа должен заканчиваться символом переноса строки. 
4. Отладочный и устаревший код нужно удалять. -1

2. Подпоследовательность максимальной суммы.
1. Утечка памяти в функции getCoordinates. -1
2. Нужно бы как-то обработать, когда на вход приходит указатель null или размер массива 0. В таком случае программа или падает, или дает некорректный результат сейчас. -1
3. Если функция должна вернуть несколько значений, то для этого нужно или передать указатели на переменные в функцию, или завести структуру и возвращать ее. А так не понятно, что за элементы лежат внутри массива. -1

3. Циклический сдвиг.
1. Это замечательно! Единственное, что делает программка это печатает "Hello world!\n".
Нужно переделать так, чтобы убедить себя и меня в том, что это работает. Например зачитать от пользователя целое число и размер сдвига, напечатать побитовое представление самого числа и после этой функции. Оценить правильность по чтению кода сложно. Пока -9

4. Нумерация матрицы по Кантору.
1. Функция не должна делать более одного действия. -1
2. Утечка памяти. -1
3. По смыслу array двумерный. А у тебя он одномерный. -1
4. Было бы еще красиво выводить числа через %3d, чтобы при больших n последние строки не уезжали вправо.
5. Если и допускается инициализация более одной переменной в строке, то только близких по смыслу и если они не инициализируются на месте. -1

5. Побитовое представление.
1. Имеющийся тест не доказывает, что программка работает. Цитата из условия: "Протестируйте ее работоспособность на типах double, float, int, unsigned int."  Идеальный вариант - написать достаточное количество своих тестов и еще дать пользователю возможность повводить свои тесты. -3

6. Сортированный подмассив.
1. Аналогично задаче 2 с возвращаемыми значениями. 
2. Нужно пояснять, какого ввода ожидает программа. -1
3. Не объявляй более одной переменной в строке. Это можно делать только тогда, когда они очень похожи и при этом не инициализируются значениями. -1
4. x и y не удачные имена. -1

7. Минимальная сумма расстояний.
Задача решена не верно. -10

8. Алгоритм Кахана.
1. Неиспользуемые переменные, как и все не нужное в коде, ухудшает читабельность. -1
2. Забыла освободить память. -1
3. sumVLob. bezKommentariev. -1

9. Суммирование ряда.
1. В программе нужно сравнивать числа. Если они отличаются в далеком знаке после запятой, то это было бы виднее, если бы ты печатала одно под другим.

10. Диаметр множества. 
1. Зачем дублировать длинную строку с вычислением расстояния между парой точек? Надо ее один раз записать в переменную и потом дважды использовать. -1
2. И не забыть освободить память. -1

11. Имена.
Задача не решена. -10

12. Пузырьковая сортировка.
1. Программа падает из-за двойного free по одному указателю -3
2. Вообще-то твоя сортировка in-place, то есть сортирует тот массив, который ей пришел на вход. Поэтому возвращение указателя на сортированный массив вводит в заблуждение пользователя функции. -1
3. И сам код дополнительно вводит в заблуждение, якобы сортировка происходит не на входных данных. На самом деле здесь int* sortedArray = array будет скопирован только указатель. Два указателя на один массив. -2

13. k ближайших точек.
Задача не решена. -10

14. Бинарный поиск.
1. Отступы поехали. 
2. Ответ хранишь как double, а печатаешь как float. -1
3. Очень не удобно тестировать. Все время приходится перекомпилировать. Ни достаточной демонстрации работы, ни теств, чтобы проверить нет. 
А вообще это не работает и я даже вижу две ошибки. -10







